{"version":3,"sources":["store/store.js","components/TitleInput.js","components/SummaryInput.js","components/JsonTree.js","components/WebhookItem.js","App.js","serviceWorker.js","index.js"],"names":["initialState","events","persistConfig","key","storage","persistedReducer","persistReducer","state","arguments","length","undefined","action","type","console","log","Object","objectSpread","concat","toConsumableArray","date","Date","json","title","summary","slice","index","store_store","store","createStore","persistor","persistStore","Title","styled","input","_templateObject","TitleInput","_ref","onChange","value","react_default","a","createElement","placeholder","Input","textarea","SummaryInput_templateObject","SummaryInput","cols","rows","JsonTree","_ref$config","config","_config$expand","expand","main_default","src","collapsed","collapseStringsAfterLength","groupArraysAfterLength","name","sortKeys","EventReceived","span","WebhookItem_templateObject","CustomVerticalTimelineElement","VerticalTimelineElement","_templateObject2","WebhookItem","onTitleChange","onSummaryChange","toString","components_TitleInput","event","target","preventDefault","components_SummaryInput","components_JsonTree","ws","WebSocket","process","Button","button","App_templateObject","HelpHint","App_templateObject2","FlexCenter","div","_templateObject3","_templateObject4","connect","dispatch","onClear","text","setWebhookTitleAction","setWebhookSummaryAction","dispatchJsonReceived","jsonReceivedAction","_useState","useState","url","_useState2","slicedToArray","setURL","onopen","onmessage","ev","JSON","parse","data","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","axios","get","t1","sent","t2","stop","this","apply","loadPublicURL","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","done","_ref5","_ref4","idx","push","components_WebhookItem","err","return","className","App_Title","onClick","dist_es6","layout","Boolean","window","location","hostname","match","ReactDOM","render","react_redux_es","integration_react","loading","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82a03cda.chunk.js","sourcesContent":["import { createStore } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web and AsyncStorage for react-native\n \n\n\nconst JSON_RECEIVED = \"JSON_RECEIVED\"\nconst SET_WEBHOOK_TITLE = \"SET_WEBHOOK_TITLE\"\nconst SET_WEBHOOK_SUMMARY = \"SET_WEBHOOK_SUMMARY\"\nconst CLEAR_ALL_ACTION = \"CLEAR_ALL_ACTION\"\n\nexport const jsonReceivedAction = (json) => {\n  return {\n    type: JSON_RECEIVED,\n    title: \"Initial title\",\n    summary: \"Some initial notes\",\n    json\n  }\n}\n\nexport const setWebhookTitleAction = (index, title) => {\n  return {\n    type: SET_WEBHOOK_TITLE,\n    index, title\n  }\n}\n\nexport const setWebhookSummaryAction = (index, summary) => {\n  return {\n    type: SET_WEBHOOK_SUMMARY,\n    index, summary\n  }\n}\n\nexport const clearAllAction = () => {\n  return {\n    type: CLEAR_ALL_ACTION\n  }\n}\n\nconst initialState = {\n  events : []\n}\n\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case JSON_RECEIVED:\n      console.log(action)\n      return {\n        ...state,\n        events : [...state.events, {\n          date : new Date(),\n          json : action.json,\n          title : \"\",\n          summary: \"\"\n        }]\n      }\n    case SET_WEBHOOK_TITLE:\n      return {\n        ...state,\n        events : [\n          ...state.events.slice(0, action.index),\n          {\n            ...state.events[action.index],\n            title : action.title\n          },\n          ...state.events.slice(action.index + 1)\n        ]\n      }\n    case SET_WEBHOOK_SUMMARY:\n      return {\n        ...state,\n        events : [\n          ...state.events.slice(0, action.index),\n          {\n            ...state.events[action.index],\n            summary : action.summary\n          },\n          ...state.events.slice(action.index + 1)\n        ]\n      }\n    case CLEAR_ALL_ACTION:\n      return {\n        ...state,\n        events : []\n      }\n    default:\n      return state\n  }\n}\n\n\nconst persistConfig = {\n  key: 'root',\n  storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n \nexport default () => {\n  let store = createStore(persistedReducer)\n  let persistor = persistStore(store)\n  return { store, persistor }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Title = styled.input`\n  display:block;\n  font-size:1.25em;\n  border: 1px solid #DDD;\n  padding: .25em;\n  border-radius:.25em;\n  margin: .5em 0;\n  width: 16em;\n  background-color: rgba(255, 255, 255, 0.2);\n`\n\nconst TitleInput = ({onChange, value}) => {\n  return (<Title type='text' placeholder=\"\" onChange={onChange} value={value}></Title>)\n}\n\nexport default TitleInput","import React from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.textarea`\n  display:block;\n  font-size:1em;\n  border: 1px solid #DDD;\n  padding: .25em;\n  border-radius:.25em;\n  margin: .5em 0 2em 0;\n  background-color: rgba(255, 255, 255, 0.4);\n`\n\nconst SummaryInput = ({onChange, value}) => {\n  return (<Input type='text' cols={50} rows={3} placeholder=\"\" onChange={onChange} value={value}></Input>)\n}\n\nexport default SummaryInput","import React from 'react';\nimport ReactJson from 'react-json-view';\n\nconst JsonTree = ({ json, config = {} }) => {\n  const { expand = 2 } = config;\n\n  return (\n    <ReactJson\n      src={json}\n      collapsed={expand}\n      collapseStringsAfterLength={32}\n      groupArraysAfterLength={20}\n      name={false}\n      sortKeys={false}\n    />\n  );\n};\n\nexport default JsonTree;\n","import React from 'react'\nimport TitleInput from \"./TitleInput\"\nimport SummaryInput from \"./SummaryInput\"\nimport JsonTree from './JsonTree'\nimport { VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport styled from 'styled-components'\n\n\nconst EventReceived = styled.span`\n  color: #777;\n`\n\nconst CustomVerticalTimelineElement = styled(VerticalTimelineElement)`\n  .vertical-timeline-element-content {\n    box-shadow: 2px 4px 8px 2px rgba(50, 50, 93, 0.15), 3px 5px 10px 3px rgba(112, 157, 199, 0.15);\n    background: linear-gradient(135deg, #F8F8F8, #E8F8F8);\n    text-align: left;\n  }\n`;\n\nconst WebhookItem = ({index, date, json, title, summary, onTitleChange, onSummaryChange}) => {\n\n  const onChangeTitle = (event) => {\n    onTitleChange(index, event.target.value)\n    event.preventDefault()\n  }\n\n  const onChangeSummary = (event) => {\n    onSummaryChange(index, event.target.value)\n    event.preventDefault()\n  }\n\n  return (\n    <CustomVerticalTimelineElement\n          key={index}\n          date={date ? date.toString() : \"\"}>\n        <EventReceived>event received</EventReceived>\n        <TitleInput   onChange={ onChangeTitle }   value={title} />\n        <SummaryInput onChange={ onChangeSummary } value={summary} />\n        <div>\n          <JsonTree json={json} />\n        </div>\n    </CustomVerticalTimelineElement>\n  )\n}\n\nexport default WebhookItem","import React, { useState, useEffect } from 'react';\nimport { VerticalTimeline } from 'react-vertical-timeline-component';\nimport './App.css';\nimport { jsonReceivedAction, setWebhookTitleAction, setWebhookSummaryAction, clearAllAction } from './store/store'\nimport { connect } from 'react-redux'\nimport WebhookItem from \"./components/WebhookItem\"\nimport styled from 'styled-components'\nimport axios from 'axios'\n\nimport 'react-vertical-timeline-component/style.min.css';\n\nconst ws = new WebSocket(`ws://localhost:${process.env.REACT_APP_WS_PORT}`);\n\n\nconst Button = styled.button`\n  padding:1em;\n  display:block;\n  border-radius:.5em;\n  font-weight:bold;\n  background: linear-gradient(135deg, white, #EFF);\n  border: 1px solid #DDD;\n  box-shadow: 1px 1px 4px #888;\n  margin-top:1em;\n  cursor:pointer;\n  height: 4em;\n`\n \nconst HelpHint = styled.span`\n  margin-top: 1em;\n  color: #888;\n`\n\nconst FlexCenter = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Title = styled.div`\n  font-size: 1.5em;\n  font-family: Open Sans, Arial;\n  margin: 0em 1em;\n  color: #999;\n  padding-top: 1em;\n`\n\n\n\n\n\nconst app = ({ \n  dispatchJsonReceived,\n  onTitleChange,\n  onSummaryChange,\n  onClear,\n  events \n}) => {\n\n  const [url, setURL] = useState({ url: null })\n  \n  ws.onopen = () => {\n    ws.onmessage = (ev) => {\n      dispatchJsonReceived(JSON.parse(ev.data))\n      console.log(\"Received \", ev.data)\n    }\n  };\n\n  useEffect(() => {\n    const loadPublicURL = async () => {\n      try {\n        setURL((await axios.get(\"/url\")).data)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    loadPublicURL()\n  }, [])\n  \n  const items = []\n  for (const [idx, event] of events.entries()) {\n    items.push(\n      <WebhookItem key={idx} index={idx} \n        title={event.title}\n        summary={event.summary}\n        date={event.date} json={event.json} \n        onTitleChange={onTitleChange}\n        onSummaryChange={onSummaryChange}\n      />\n    )\n  }\n  console.log(url)\n  return (\n    <div className=\"App\">\n      <FlexCenter>\n        <Title>Webhook Catcher</Title>\n        <Button type=\"text\" onClick={onClear}>Clear</Button>\n      </FlexCenter>\n      <FlexCenter>\n        <HelpHint>Use this pattern for your webhook URLs: {url.url}/webhook/*</HelpHint>\n      </FlexCenter>\n      <VerticalTimeline layout={'2-columns'}>\n        {items}\n      </VerticalTimeline>\n    </div>\n  );\n};\n\n\nexport default connect(\n  state => ({\n    events : state.events\n  }),\n  dispatch => ({\n    onClear : (event) => {\n      dispatch(clearAllAction())\n      event.preventDefault()\n    },\n    onTitleChange :   (index, text) => dispatch(setWebhookTitleAction(index, text)),\n    onSummaryChange : (index, text) => dispatch(setWebhookSummaryAction(index, text)),\n    dispatchJsonReceived :     json => dispatch(jsonReceivedAction(json))\n  })\n)(app)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\"\nimport store from './store/store'\nimport * as serviceWorker from './serviceWorker'\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nReactDOM.render(\n  <Provider store={store().store}>\n    <PersistGate loading={null} persistor={store().persistor}>\n      <App />\n    </PersistGate>\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}